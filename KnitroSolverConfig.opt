# Knitro Options file

# Which algorithm to use.
#   auto   = 0 = let Knitro choose the algorithm
#   direct = 1 = use Interior (barrier) Direct algorithm
#   cg     = 2 = use Interior (barrier) CG algorithm
#   active = 3 = use Active Set SLQP algorithm
#   sqp    = 4 = use Active Set SQP algorithm
#   multi  = 5 = run multiple algorithms (perhaps in parallel)
algorithm    3

# Which algorithm to use for QP subproblem solves in Active or SQP algorithms.
#   auto   = 0 = let Knitro choose the algorithm
#   direct = 1 = use Interior (barrier) Direct algorithm
#   cg     = 2 = use Interior (barrier) CG algorithm
#   active = 3 = use Active Set SLQP algorithm
act_qpalg    3

# Which linesearch method to use.
#   auto        = 0 = let Knitro choose the linesearch method
#   backtrack   = 1 = backtracking linesearch
#   interpolate = 2 = interpolation based linesearch
linesearch   2

# Maximum allowable number of trial values during the linesearch of the
# Interior Direct or SQP algorithm.
linesearch_maxtrials  10

# How to compute/approximate the gradient of the objective
# and constraint functions.
#   exact        = 1 = user supplies exact first derivatives
#   forward      = 2 = gradients computed by internal forward finite differences
#   central      = 3 = gradients computed by internal central finite differences
#   user_forward = 4 = gradients computed by user-provided forward finite differences
#   user_central = 5 = gradients computed by user-provided central finite differences
gradopt      exact

# How to compute/approximate the Hessian of the Lagrangian.
#   exact           = 1 = user supplies exact second derivatives
#   bfgs            = 2 = Knitro computes a dense quasi-Newton BFGS Hessian
#   sr1             = 3 = Knitro computes a dense quasi-Newton SR1 Hessian
#   product_findiff = 4 = Knitro computes Hessian-vector products by finite differences
#   product         = 5 = user supplies exact Hessian-vector products
#   lbfgs           = 6 = Knitro computes a limited-memory quasi-Newton BFGS Hessian
hessopt      lbfgs

# Specifies the final relative stopping tolerance for the feasibility
# error. Smaller values of feastol result in a higher degree of accuracy
# in the solution with respect to feasibility.
feastol      0

# Feasibility tolerance for LP subproblems in Active or SQP algorithms.
act_lpfeastol   0

# Whether to enforce satisfaction of simple bounds at all iterations.
#   no      = 0 = allow iterations to violate the bounds
#   always  = 1 = enforce bounds satisfaction of all iterates
#   initpt  = 2 = enforce bounds satisfaction of initial point
honorbnds    always

# Step size tolerance used for terminating the optimization.
xtol         1e-3

# Consecutive iterations for stopping on small changes in the solution estimate.
xtol_iters   10

# Value used for objective function value based termination.
fstopval     1e-6

# Tolerance for stopping on small changes to the objective.
ftol         1e-6

# Consecutive iterations for stopping on small changes to the objective.
ftol_iters   10

# Specifies the final relative stopping tolerance for the KKT (optimality)
# error. Smaller values of opttol result in a higher degree of accuracy in
# the solution with respect to optimality.
opttol       1e-8

# Maximum number of iterations to allow
# (if 0 then Knitro determines the best value).
# Default values are 10000 for NLP and 3000 for MIP.
maxit        100

# Specifies the verbosity of output.
#   none         = 0 = nothing
#   summary      = 1 = only final summary information
#   iter_10      = 2 = information every 10 iterations is printed
#   iter         = 3 = information at each iteration is printed
#   iter_verbose = 4 = more verbose information at each iteration is printed
#   iter_x       = 5 = in addition, values of solution vector (x) are printed
#   all          = 6 = in addition, constraints (c) and multipliers (lambda)
outlev       iter_verbose






